position 0  1  2  3  4  5  6  7  8
array = [3, 2, 0, 1, 3, 1, 2, 0, 0]
start at position 0
goal: get to the end in as few moves as possible
guarantee: all values non-negatives
guarantee: no values can move past final spot
each position tells you up-to how far foward you can move

solve the example

The follow up question is what is the complexity: n*(n-1)*(n-2)*...1 = O(n^n) :(
How to improve: avoid visiting nodes that have been visited.
What is the complexity then: should be O(n^2). Think in graph way of thinking (edge, node) -> (n^2/2, n) -> each edge only visit once (not node), so it is O(n^2)

public class Node {
    int pos;
    String path;
    node(int, path);
   }
    
public boolean find(ArrayList array) {

    LinkedList queue = new LinkedList();
    
    stack.add(new node(0, ""));
    
    while (true) {
        Node node = stack.pop();
        
        for(int j = k; j < array[node.i]; j++) {
            int k= i+j;
            if(k == array.size() - 1) {
                
                System.out.print("Path = " node.path + " " + k;);
                return true;
                }
            Node n = new Node(k, node.path + " " + k);
            stack.push(node);
        }
    }
    
    return false;
}
        